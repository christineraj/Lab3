---
title: "Lab7"
author: "Christine Raj"
format:
  html:
    embed-resources: true
editor: visual
---

## Packages

```{r}
library(parallel)
library(microbenchmark)
library(matrixStats)
```

## Problem 1 Vectorization

```{r}
fun1 <- function(n = 100, k = 4, lambda = 4) {
  a <- NULL
  
  for (i in 1:n){
    a <- rbind(a, rpois(k, lambda))    
  }
  
  return(a)
}

fun1alt <- function(n = 100, k = 4, lambda = 4) {
  b <- NULL
  b <- matrix(rpois(n * k, lambda), ncol = k)
  
  return(b)
}

set.seed(16)
n <- 100
k <- 4
lambda <- 4
fun1check <- fun1(n, k, lambda)
fun1altcheck <- fun1alt(n, k, lambda)

dim(fun1check)
dim(fun1altcheck)


# Benchmarking
microbenchmark::microbenchmark(
  fun1(),
  fun1alt()
)

```

## Question 2 

```{r}
# Data Generating Process (10 x 10,000 matrix)
set.seed(1234)
y <- matrix(rnorm(1e4), nrow=10)

# Find each column's max value
fun2 <- function(y) {
  apply(y, 2, max)
}

fun2alt <- function(y) { 
  columns <- ncol(y)
  max_values <- numeric(columns)
  for (i in 1:columns) {
  max_values[i] <- max(y[, i])
  }
  return(max_values)
}

fun2check <- fun2(y)
fun2altcheck <- fun2alt(y)
identical(fun2check, fun2altcheck)

microbenchmark::microbenchmark(
  fun2(y),
  fun2alt(y)
)

```

## Parallelization

```{r}
my_boot <- function(dat, stat, R, ncpus = 1L) {
  
  # Getting the random indices
  n <- nrow(dat)
  idx <- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)
  

 ans <- mclapply(1:R, function(i) {
  stat(dat[idx[, i], , drop = FALSE])
}, mc.cores = ncpus)

  
  # Converting the list into a matrix
  ans <- do.call(rbind, ans)

  return(ans)
}
```

## Applying My_Boot

```{r}
# Bootstrap of an OLS
my_stat <- function(d) coef(lm(y ~ x, data=d))

# DATA SIM
set.seed(1)
n <- 500; R <- 1e4

x <- cbind(rnorm(n)); y <- x*5 + rnorm(n)

# Checking if we get something similar as lm
ans0 <- confint(lm(y~x))
ans1 <- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)

# You should get something like this
t(apply(ans1, 2, quantile, c(.025,.975)))
##                   2.5%      97.5%
## (Intercept) -0.1372435 0.05074397
## x            4.8680977 5.04539763
ans0
##                  2.5 %     97.5 %
## (Intercept) -0.1379033 0.04797344
## x            4.8650100 5.04883353

system.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 1L))
system.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 2L))
```
